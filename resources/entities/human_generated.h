// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HUMAN_ENTITY_CHARACTER_H_
#define FLATBUFFERS_GENERATED_HUMAN_ENTITY_CHARACTER_H_

#include "flatbuffers/flatbuffers.h"

namespace Entity {
namespace Character {

struct Vec3;

struct Human;
struct HumanBuilder;

struct ItemName;
struct ItemNameBuilder;

enum class Movement : int8_t {
  Walking = 1,
  Flying = 2,
  InWater = 3,
  MIN = Walking,
  MAX = InWater
};

inline const Movement (&EnumValuesMovement())[3] {
  static const Movement values[] = {
    Movement::Walking,
    Movement::Flying,
    Movement::InWater
  };
  return values;
}

inline const char * const *EnumNamesMovement() {
  static const char * const names[4] = {
    "Walking",
    "Flying",
    "InWater",
    nullptr
  };
  return names;
}

inline const char *EnumNameMovement(Movement e) {
  if (flatbuffers::IsOutRange(e, Movement::Walking, Movement::InWater)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(Movement::Walking);
  return EnumNamesMovement()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(static_cast<void *>(this), 0, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct Human FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HumanBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_POSITION = 6,
    VT_MOVEMENTTYPE = 8,
    VT_LIKESITEMS = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const Entity::Character::Vec3 *position() const {
    return GetStruct<const Entity::Character::Vec3 *>(VT_POSITION);
  }
  Entity::Character::Movement movementType() const {
    return static_cast<Entity::Character::Movement>(GetField<int8_t>(VT_MOVEMENTTYPE, 1));
  }
  const flatbuffers::Vector<flatbuffers::Offset<Entity::Character::ItemName>> *likesItems() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Entity::Character::ItemName>> *>(VT_LIKESITEMS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<Entity::Character::Vec3>(verifier, VT_POSITION) &&
           VerifyField<int8_t>(verifier, VT_MOVEMENTTYPE) &&
           VerifyOffset(verifier, VT_LIKESITEMS) &&
           verifier.VerifyVector(likesItems()) &&
           verifier.VerifyVectorOfTables(likesItems()) &&
           verifier.EndTable();
  }
};

struct HumanBuilder {
  typedef Human Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Human::VT_NAME, name);
  }
  void add_position(const Entity::Character::Vec3 *position) {
    fbb_.AddStruct(Human::VT_POSITION, position);
  }
  void add_movementType(Entity::Character::Movement movementType) {
    fbb_.AddElement<int8_t>(Human::VT_MOVEMENTTYPE, static_cast<int8_t>(movementType), 1);
  }
  void add_likesItems(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Entity::Character::ItemName>>> likesItems) {
    fbb_.AddOffset(Human::VT_LIKESITEMS, likesItems);
  }
  explicit HumanBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HumanBuilder &operator=(const HumanBuilder &);
  flatbuffers::Offset<Human> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Human>(end);
    return o;
  }
};

inline flatbuffers::Offset<Human> CreateHuman(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    const Entity::Character::Vec3 *position = 0,
    Entity::Character::Movement movementType = Entity::Character::Movement::Walking,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Entity::Character::ItemName>>> likesItems = 0) {
  HumanBuilder builder_(_fbb);
  builder_.add_likesItems(likesItems);
  builder_.add_position(position);
  builder_.add_name(name);
  builder_.add_movementType(movementType);
  return builder_.Finish();
}

struct Human::Traits {
  using type = Human;
  static auto constexpr Create = CreateHuman;
};

inline flatbuffers::Offset<Human> CreateHumanDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const Entity::Character::Vec3 *position = 0,
    Entity::Character::Movement movementType = Entity::Character::Movement::Walking,
    const std::vector<flatbuffers::Offset<Entity::Character::ItemName>> *likesItems = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto likesItems__ = likesItems ? _fbb.CreateVector<flatbuffers::Offset<Entity::Character::ItemName>>(*likesItems) : 0;
  return Entity::Character::CreateHuman(
      _fbb,
      name__,
      position,
      movementType,
      likesItems__);
}

struct ItemName FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ItemNameBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct ItemNameBuilder {
  typedef ItemName Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ItemName::VT_NAME, name);
  }
  explicit ItemNameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ItemNameBuilder &operator=(const ItemNameBuilder &);
  flatbuffers::Offset<ItemName> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ItemName>(end);
    return o;
  }
};

inline flatbuffers::Offset<ItemName> CreateItemName(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  ItemNameBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

struct ItemName::Traits {
  using type = ItemName;
  static auto constexpr Create = CreateItemName;
};

inline flatbuffers::Offset<ItemName> CreateItemNameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Entity::Character::CreateItemName(
      _fbb,
      name__);
}

inline const Entity::Character::Human *GetHuman(const void *buf) {
  return flatbuffers::GetRoot<Entity::Character::Human>(buf);
}

inline const Entity::Character::Human *GetSizePrefixedHuman(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Entity::Character::Human>(buf);
}

inline bool VerifyHumanBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Entity::Character::Human>(nullptr);
}

inline bool VerifySizePrefixedHumanBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Entity::Character::Human>(nullptr);
}

inline void FinishHumanBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Entity::Character::Human> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedHumanBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Entity::Character::Human> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Character
}  // namespace Entity

#endif  // FLATBUFFERS_GENERATED_HUMAN_ENTITY_CHARACTER_H_
